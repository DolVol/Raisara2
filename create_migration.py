#!/usr/bin/env python3
"""
Create Migration for User Table Columns
This script creates a proper Flask-Migrate migration file for the missing user table columns.
"""

import os
from datetime import datetime

def create_migration_file():
    """Create a migration file for the missing user table columns"""
    
    # Create timestamp for migration file
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Migration file content
    migration_content = f'''"""Add missing user table columns

Revision ID: {timestamp}
Revises: 
Create Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '{timestamp}'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add missing columns to user table
    try:
        op.add_column('user', sa.Column('last_login', sa.DateTime(), nullable=True))
        print("‚úÖ Added last_login column")
    except Exception as e:
        print(f"‚ö†Ô∏è last_login column may already exist: {{e}}")
    
    try:
        op.add_column('user', sa.Column('previous_login', sa.DateTime(), nullable=True))
        print("‚úÖ Added previous_login column")
    except Exception as e:
        print(f"‚ö†Ô∏è previous_login column may already exist: {{e}}")
    
    try:
        op.add_column('user', sa.Column('login_count', sa.Integer(), nullable=True, default=0))
        print("‚úÖ Added login_count column")
    except Exception as e:
        print(f"‚ö†Ô∏è login_count column may already exist: {{e}}")
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Remove the columns we added
    try:
        op.drop_column('user', 'login_count')
        print("‚úÖ Removed login_count column")
    except Exception as e:
        print(f"‚ö†Ô∏è Error removing login_count column: {{e}}")
    
    try:
        op.drop_column('user', 'previous_login')
        print("‚úÖ Removed previous_login column")
    except Exception as e:
        print(f"‚ö†Ô∏è Error removing previous_login column: {{e}}")
    
    try:
        op.drop_column('user', 'last_login')
        print("‚úÖ Removed last_login column")
    except Exception as e:
        print(f"‚ö†Ô∏è Error removing last_login column: {{e}}")
    
    # ### end Alembic commands ###
'''
    
    # Create migrations/versions directory if it doesn't exist
    versions_dir = 'migrations/versions'
    os.makedirs(versions_dir, exist_ok=True)
    
    # Write migration file
    migration_filename = f'{timestamp}_add_user_table_columns.py'
    migration_path = os.path.join(versions_dir, migration_filename)
    
    with open(migration_path, 'w', encoding='utf-8') as f:
        f.write(migration_content)
    
    print(f"‚úÖ Created migration file: {migration_path}")
    return migration_path

def main():
    """Main function"""
    print("üöÄ Creating Flask-Migrate Migration File")
    print("=" * 50)
    
    try:
        migration_path = create_migration_file()
        
        print("=" * 50)
        print("‚úÖ Migration file created successfully!")
        print(f"üìÅ File: {migration_path}")
        print()
        print("üîß To apply this migration on Render:")
        print("   1. Deploy this code to Render")
        print("   2. Run: flask db upgrade")
        print()
        print("üîß To apply this migration locally:")
        print("   1. Run: flask db upgrade")
        print()
        print("üí° Alternative: Run render_db_fix.py directly on Render")
        
    except Exception as e:
        print(f"‚ùå Error creating migration file: {e}")
        return False
    
    return True

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)