from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import secrets

db = SQLAlchemy()

class User(UserMixin, db.Model):
    __tablename__ = 'user'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_active = db.Column(db.Boolean, default=True)
    reset_token = db.Column(db.String(100), nullable=True)
    reset_token_expires = db.Column(db.DateTime, nullable=True)
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
    
    def generate_reset_token(self):
        self.reset_token = secrets.token_urlsafe(32)
        self.reset_token_expires = datetime.utcnow() + timedelta(hours=1)
        return self.reset_token
    
    def verify_reset_token(self, token):
        if not self.reset_token or not self.reset_token_expires:
            return False
        if self.reset_token != token:
            return False
        if datetime.utcnow() > self.reset_token_expires:
            return False
        return True
    
    def clear_reset_token(self):
        self.reset_token = None
        self.reset_token_expires = None

class GridSettings(db.Model):
    __tablename__ = 'grid_settings'
    
    id = db.Column(db.Integer, primary_key=True)
    rows = db.Column(db.Integer, default=5)
    cols = db.Column(db.Integer, default=5)
    # Note: NO user_id column for now

class Dome(db.Model):
    __tablename__ = 'dome'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    grid_row = db.Column(db.Integer, nullable=False)
    grid_col = db.Column(db.Integer, nullable=False)
    internal_rows = db.Column(db.Integer, default=5)
    internal_cols = db.Column(db.Integer, default=5)
    image_url = db.Column(db.String(255), nullable=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    # Note: NO farm_id column for now

class Tree(db.Model):
    __tablename__ = 'tree'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    row = db.Column(db.Integer, default=0)
    col = db.Column(db.Integer, default=0)
    info = db.Column(db.Text, nullable=True)
    life_days = db.Column(db.Integer, default=0)
    image_url = db.Column(db.String(200), nullable=True)
    dome_id = db.Column(db.Integer, db.ForeignKey('dome.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

# Placeholder classes for compatibility
class Farm:
    pass

class Row:
    pass
